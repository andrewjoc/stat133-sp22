vegan = c(TRUE, FALSE, FALSE, FALSE, TRUE)
)
thrones %>%
filter(title == "princess") %>%
select(title, gpa)
thrones <- data.frame(
first = c("Arya", "Jon", "Tyrion", "Daenerys", "Yara"),
last = c("Stark", "Snow", "Lannister", "Targaryen", "Greyjoy"),
title = c("princess", "lord", "master", "khaleesi", "princess"),
gpa = c(3,3,4,3,NA),
vegan = c(TRUE, FALSE, FALSE, FALSE, TRUE)
)
thrones %>%
filter(title == "princess") %>%
select(title, gpa) %>%
summarise(avg_gpa = mean(gpa))
thrones <- data.frame(
first = c("Arya", "Jon", "Tyrion", "Daenerys", "Yara"),
last = c("Stark", "Snow", "Lannister", "Targaryen", "Greyjoy"),
title = c("princess", "lord", "master", "khaleesi", "princess"),
gpa = c(3,3,4,3,NA),
vegan = c(TRUE, FALSE, FALSE, FALSE, TRUE)
)
thrones %>%
filter(title == "princess") %>%
select(title, gpa) %>%
summarise(avg_gpa = mean(gpa, na.rm = TRUE))
thrones <- data.frame(
first = c("Jon", "Arya", "Tyrion", "Daenerys", "Yara"),
last = c("Snow", "Stark", "Lannister", "Targaryen", "Greyjoy"),
gender = c("male", "female", "male", "female", "female"),
title = c("princess", "lord", "master", "khaleesi", "princess"),
gpa = c(3,3,4,3,4)
)
thrones %>%
filter(title == "princess") %>%
select(title, gpa) %>%
summarise(avg_gpa = mean(gpa, na.rm = TRUE))
thrones <- data.frame(
first = c("Jon", "Arya", "Tyrion", "Daenerys", "Yara"),
last = c("Snow", "Stark", "Lannister", "Targaryen", "Greyjoy"),
gender = c("male", "female", "male", "female", "female"),
title = c("princess", "lord", "master", "khaleesi", "princess"),
gpa = c(3,3,4,3,4)
)
mean(group_by(select(thrones, gpa, gender), gender), gpa)
thrones <- data.frame(
first = c("Jon", "Arya", "Tyrion", "Daenerys", "Yara"),
last = c("Snow", "Stark", "Lannister", "Targaryen", "Greyjoy"),
gender = c("male", "female", "male", "female", "female"),
title = c("princess", "lord", "master", "khaleesi", "princess"),
gpa = c(3,3,4,3,4)
)
summarise(
select(group_by(thrones, gender), gpa, gender),
gpa = mean(gpa)
)
thrones <- data.frame(
first = c("Jon", "Arya", "Tyrion", "Daenerys", "Yara"),
last = c("Snow", "Stark", "Lannister", "Targaryen", "Greyjoy"),
gender = c("male", "female", "male", "female", "female"),
title = c("princess", "lord", "master", "khaleesi", "princess"),
gpa = c(3,3,4,3,4)
)
summarise(
select(group_by(thrones, gender), gpa, gender),
gpa = round(mean(gpa),2)
)
foo <- function() {
print("hi!")
}
foo <- function() {
print("hi!")
}
foo
foo <- function {
foo <- function() {
return("hi!")
}
foo
foo <- function() {
return("hi!")
}
foo()
Foo <- function() {
return("hi!")
}
foo()
Foo <- function() {
return("hi!")
}
Foo()
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = list(major = "jedi studies", minor = "galactic policies"), grades = list(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = list(major = "jedi studies", minor = "galactic policies"), grades = list(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student$grades[, score]
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = list(major = "jedi studies", minor = "galactic policies"), grades = list(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student$grades[ ,score]
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = list(major = "jedi studies", minor = "galactic policies"), grades = list(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student$grades[ ,2]
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = list(major = "jedi studies", minor = "galactic policies"), grades = list(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student[4][ ,2]
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = list(major = "jedi studies", minor = "galactic policies"), grades = list(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student[[4]][ ,2]
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = c(major = "jedi studies", minor = "galactic policies"), grades = c(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = c(major = "jedi studies", minor = "galactic policies"), grades = c(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student$grades[ ,score]
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = c(major = "jedi studies", minor = "galactic policies"), grades = c(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student$grades[ ,2]
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = c(major = "jedi studies", minor = "galactic policies"), grades = c(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student[[4]][ ,2]
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = c(major = "jedi studies", minor = "galactic policies"), grades = c(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student[4][ ,2]
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = c(major = "jedi studies", minor = "galactic policies"), grades = c(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student <- list(name = "Luke Skywalker", gpa = 3.8, major_minor = c(major = "jedi studies", minor = "galactic policies"), grades = c(course = c("force-101", "jedi-poetry", "light-sabers"), score = c(9.3, 10.0, 8.5)))
student
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student
student
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[ ,score]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[ ,2]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[ ,score]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[[4]][ ,2]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[4][ ,2]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[4]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[1,2]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[1,1]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[ ,2]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[score]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades["score"]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[ ,"score"]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[ ,score]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[ ,2]
student <- list(name = "Luke Skywalker",
gpa = 3.8,
major_minor = c(major = "jedi studies", minor = "galactic policies"),
grades = data.frame(
course = c("force-101", "jedi-poetry", "light-sabers"),
score = c(9.3, 10.0, 8.5)
))
student$grades[4]
ques20text <- "jon_snow@berkeley.edu http://stat.ucb.edu/ (37.8719N, 122.2585W) 1868-March-23 7000 Center, Oakland, CA, 94621 And </p>some</p> html."
str_view(ques20text, ""[[:lower:]]$"")
ques20text <- "jon_snow@berkeley.edu http://stat.ucb.edu/ (37.8719N, 122.2585W) 1868-March-23 7000 Center, Oakland, CA, 94621 And </p>some</p> html."
str_view(ques20text, "[[:lower:]]$)
ques20text <- "jon_snow@berkeley.edu http://stat.ucb.edu/ (37.8719N, 122.2585W) 1868-March-23 7000 Center, Oakland, CA, 94621 And </p>some</p> html."
str_detect(ques20text, "[[:lower:]]$)
ques20text <- "jon_snow@berkeley.edu http://stat.ucb.edu/ (37.8719N, 122.2585W) 1868-March-23 7000 Center, Oakland, CA, 94621 And </p>some</p> html."
str_detect(ques20text, "[[:lower:]]$")
ques20text <- "jon_snow@berkeley.edu http://stat.ucb.edu/ (37.8719N, 122.2585W) 1868-March-23 7000 Center, Oakland, CA, 94621 And </p>some</p> html."
str_view(ques20text, "[[:lower:]]$")
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tidyverse)
library(XML)
tmp <- head(dat$Mark)
tmp
# extract HTML table into a data.frame
tables = readHTMLTable("women-discus-throw.html", header = TRUE)
dat = tables[[2]]
dim(dat)
tmp <- head(dat$Mark)
tmp
knitr::opts_chunk$set(echo = TRUE)
v1 <- c(1,2,3,4)
v2 <- c(5,6,7,8)
v3 <- c(9,10,11,12)
v4 <- c(13,14,15,16)
mat1 <- cbind(v1,v2v3,v4)
v1 <- c(1,2,3,4)
v2 <- c(5,6,7,8)
v3 <- c(9,10,11,12)
v4 <- c(13,14,15,16)
mat1 <- cbind(v1,v2,v3,v4)
mat1
ncol()
?ncol
ncol(mat1)
# QUESTION 2
trace_matrix <- function(mat) {
if (ncol(mat) != nrow(mat)) {
stop("\nMatrix must be square with n rows and n columns")
}
else {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
return(trace_sum)
}
# QUESTION 2
trace_matrix <- function(mat) {
if (ncol(mat) != nrow(mat)) {
stop("\nMatrix must be square with n rows and n columns")
}
else {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
return(trace_sum)
}
trace_matrix(mat1)
# QUESTION 2
#' @title matrix trace
#' @description returns the trace of a matrix which is the sum of the elements in its diagonal
#' @param mat matrix
#' @return computed trace of the input matrix mat
trace_matrix <- function(mat) {
if (ncol(mat) != nrow(mat)) {
stop("\nMatrix must be square with n rows and n columns")
}
else {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
return(trace_sum)
}
trace_matrix(mat1)
v1 <- c(1,2,3,4)
v2 <- c(5,6,7,8)
v3 <- c(9,10,11,12)
mat1 <- cbind(v1,v2,v3,v4)
m
v1 <- c(1,2,3,4)
v2 <- c(5,6,7,8)
v3 <- c(9,10,11,12)
mat1 <- cbind(v1,v2,v3,v4)
v1 <- c(1,2,3,4)
v2 <- c(5,6,7,8)
v3 <- c(9,10,11,12)
mat1 <- cbind(v1,v2,v3)
ncol(mat1)
ncol(mat1)
nrow(mat1)
# QUESTION 2
#' @title matrix trace
#' @description returns the trace of a matrix which is the sum of the elements in its diagonal
#' @param mat matrix
#' @return computed trace of the input matrix mat
trace_matrix <- function(mat) {
if (ncol(mat) != nrow(mat)) {
stop("\nMatrix must be square with n rows and n columns")
}
else {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
return(trace_sum)
}
trace_matrix(mat1)
v1 <- c(1,2,3,4)
v2 <- c(5,6,7,8)
v3 <- c(9,10,11,12)
v4 <- c(NA, NA, NA, NA)
mat1 <- cbind(v1,v2,v3)
ncol(mat1)
nrow(mat1)
v1 <- c(1,2,3,4)
v2 <- c(5,6,7,8)
v3 <- c(9,10,11,12)
v4 <- c(NA, NA, NA, NA)
mat1 <- cbind(v1,v2,v3, v4)
ncol(mat1)
nrow(mat1)
# QUESTION 2
#' @title matrix trace
#' @description returns the trace of a matrix which is the sum of the elements in its diagonal
#' @param mat matrix
#' @param na.rm=TRUE NA values within the matrix are not included in the trace
#' @return computed trace of the input matrix mat
trace_matrix <- function(mat, na.rm = TRUE) {
if (ncol(mat) != nrow(mat)) {
stop("\nMatrix must be square with n rows and n columns")
}
else {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
return(trace_sum)
}
trace_matrix(mat1)
# QUESTION 2
#' @title matrix trace
#' @description returns the trace of a matrix which is the sum of the elements in its diagonal
#' @param mat matrix
#' @param na.rm=TRUE NA values within the matrix are not included in the trace
#' @return computed trace of the input matrix mat
trace_matrix <- function(mat, na.rm=FALSE) {
if (ncol(mat) != nrow(mat)) {
stop("\nMatrix must be square with n rows and n columns")
}
if (na.rm) {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + is.numeric(mat[i,i])
}
else {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
return(trace_sum)
}
trace_matrix(mat1)
# QUESTION 2
#' @title matrix trace
#' @description returns the trace of a matrix which is the sum of the elements in its diagonal
#' @param mat matrix
#' @param na.rm=TRUE NA values within the matrix are not included in the trace
#' @return computed trace of the input matrix mat
trace_matrix <- function(mat, na.rm=FALSE) {
if (ncol(mat) != nrow(mat)) {
stop("\nMatrix must be square with n rows and n columns")
}
if (na.rm) {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + is.numeric(mat[i,i])
}
else {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
return(trace_sum)
}
trace_matrix(mat1, na.rm=TRUE)
# QUESTION 2
#' @title matrix trace
#' @description returns the trace of a matrix which is the sum of the elements in its diagonal
#' @param mat matrix
#' @param na.rm=TRUE NA values within the matrix are not included in the trace
#' @return computed trace of the input matrix mat
trace_matrix <- function(mat, na.rm=FALSE) {
if (ncol(mat) != nrow(mat)) {
stop("\nMatrix must be square with n rows and n columns")
}
if (na.rm) {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + as.numeric(mat[i,i])
}
else {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
return(trace_sum)
}
trace_matrix(mat1, na.rm=TRUE)
# QUESTION 2
#' @title matrix trace
#' @description returns the trace of a matrix which is the sum of the elements in its diagonal
#' @param mat matrix
#' @param na.rm=TRUE NA values within the matrix are not included in the trace
#' @return computed trace of the input matrix mat
trace_matrix <- function(mat, na.rm=FALSE) {
if (ncol(mat) != nrow(mat)) {
stop("\nMatrix must be square with n rows and n columns")
}
if (na.rm) {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
else {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
return(trace_sum)
}
trace_matrix(mat1, na.rm=TRUE)
# QUESTION 2
#' @title matrix trace
#' @description returns the trace of a matrix which is the sum of the elements in its diagonal
#' @param mat matrix
#' @param na.rm=TRUE NA values within the matrix are not included in the trace
#' @return computed trace of the input matrix mat
trace_matrix <- function(mat, na.rm=FALSE) {
if (ncol(mat) != nrow(mat)) {
stop("\nMatrix must be square with n rows and n columns")
}
if (na.rm) {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
else {
trace_sum <- 0
for (i in 1:ncol(mat))
trace_sum  <- trace_sum + mat[i,i]
}
return(trace_sum)
}
trace_matrix(mat1)
